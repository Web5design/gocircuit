/* Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package scribe;

import (
        "tumblr/encoding/thrift"
        "fmt"
)


type ResultCode int
const (
  OK ResultCode = 0
  TRY_LATER ResultCode = 1
)
func (p ResultCode) String() string {
  switch p {
  case OK: return "OK"
  case TRY_LATER: return "TRY_LATER"
  }
  return ""
}

func FromResultCodeString(s string) ResultCode {
  switch s {
  case "OK": return OK
  case "TRY_LATER": return TRY_LATER
  }
  return ResultCode(-10000)
}

func (p ResultCode) Value() int {
  return int(p)
}

func (p ResultCode) IsEnum() bool {
  return true
}

/**
 * Attributes:
 *  - Category
 *  - Message
 */
type LogEntry struct {
  thrift.TStruct
  Category string "category"; // 1
  Message string "message"; // 2
}

func NewLogEntry() *LogEntry {
  output := &LogEntry{
    TStruct:thrift.NewTStruct("LogEntry", []thrift.TField{
    thrift.NewTField("category", thrift.STRING, 1),
    thrift.NewTField("message", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *LogEntry) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "category" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *LogEntry) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "category", p.ThriftName(), err1); }
  p.Category = v0
  return err
}

func (p *LogEntry) ReadFieldCategory(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *LogEntry) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadString()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "message", p.ThriftName(), err3); }
  p.Message = v2
  return err
}

func (p *LogEntry) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *LogEntry) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("LogEntry")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *LogEntry) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("category", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "category", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Category))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "category", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "category", p.ThriftName(), err); }
  return err
}

func (p *LogEntry) WriteFieldCategory(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *LogEntry) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("message", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "message", p.ThriftName(), err); }
  return err
}

func (p *LogEntry) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *LogEntry) TStructName() string {
  return "LogEntry"
}

func (p *LogEntry) ThriftName() string {
  return "LogEntry"
}

func (p *LogEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogEntry(%+v)", *p)
}

func (p *LogEntry) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*LogEntry)
  if !ok {
    return 0, false
  }
  return thrift.TType(thrift.STRUCT).Compare(p, data)
}

func (p *LogEntry) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Category
  case 2: return p.Message
  }
  return nil
}

func (p *LogEntry) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("category", thrift.STRING, 1),
    thrift.NewTField("message", thrift.STRING, 2),
    })
}

func init() {
}

